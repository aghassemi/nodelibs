// JavaScript PBKDF2 Implementation
var Buffer=require("../buffer").Buffer,blocksize=64,zeroBuffer=new Buffer(blocksize);zeroBuffer.fill(0),module.exports=function(e,t){return t=t||{},t.pbkdf2=function(e,r,n,i,o){if("function"!=typeof o)throw new Error("No callback provided to pbkdf2");setTimeout(function(){cb(null,t.pbkdf2(e,r,n,i))})},t.pbkdf2Sync=function(t,r,n,i){if("number"!=typeof n)throw new TypeError("Iterations not a number");if(0>n)throw new TypeError("Bad iterations");if("number"!=typeof i)throw new TypeError("Key length not a number");if(0>i)throw new TypeError("Bad key length");var t=Buffer.isBuffer(t)?t:new Buffer(t);t.length>blocksize?t=createHash(alg).update(t).digest():t.length<blocksize&&(t=Buffer.concat([t,zeroBuffer],blocksize));var o,s,a,u=0,f=1,c=new Buffer(4),h=new Buffer(i);for(h.fill(0);i;){s=i>20?20:i,c[0]=f>>24&255,c[1]=f>>16&255,c[2]=f>>8&255,c[3]=255&f,o=e("sha1",t),o.update(r),o.update(c),a=o.digest(),a.copy(h,u,0,s);for(var l=1;n>l;l++){o=e("sha1",t),o.update(a),a=o.digest();for(var p=0;s>p;p++)h[p]^=a[p]}i-=s,f++,u+=s}return h},t};